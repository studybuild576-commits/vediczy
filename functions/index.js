const functions = require("firebase-functions");
const {initializeApp} = require("firebase-admin/app");
const {getFirestore} = require("firebase-admin/firestore");
const {getStorage} = require("firebase-admin/storage");
const {DiscussServiceClient} = require("@google-ai/generativelanguage");
const {GoogleAuth} = require("google-auth-library");
const pdf = require("pdf-parse");

// Firebase Admin SDK ‡§ï‡•ã ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç
initializeApp();

// Gemini API ‡§ï‡•ç‡§≤‡§æ‡§á‡§Ç‡§ü ‡§ï‡•ã ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç
const MODEL_NAME = "models/text-bison-001";
// ü§´ ‡§Ö‡§™‡§®‡•Ä Gemini API Key ‡§ï‡•ã ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∞‡§ñ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§π‡§Æ ‡§á‡§∏‡•á environment variable ‡§Æ‡•á‡§Ç ‡§°‡§æ‡§≤‡•á‡§Ç‡§ó‡•á
const API_KEY = process.env.GEMINI_API_KEY; 
const client = new DiscussServiceClient({
  authClient: new GoogleAuth().fromAPIKey(API_KEY),
});

/**
 * ‡§Ø‡§π Cloud Function ‡§§‡§¨ ‡§ö‡§≤‡•á‡§ó‡§æ ‡§ú‡§¨ Firebase Storage ‡§ï‡•á 'tests-to-process/'
 * ‡§´‡•ã‡§≤‡•ç‡§°‡§∞ ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§à ‡§®‡§à PDF ‡§´‡§æ‡§á‡§≤ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§π‡•ã‡§ó‡•Ä‡•§
 */
exports.processPdfToTest = functions.storage.object().onFinalize(async (object) => {
  const fileBucket = object.bucket; // PDF ‡§ú‡§ø‡§∏ ‡§¨‡§æ‡§≤‡•ç‡§ü‡•Ä ‡§Æ‡•á‡§Ç ‡§π‡•à
  const filePath = object.name;   // PDF ‡§ï‡§æ ‡§™‡•Ç‡§∞‡§æ ‡§∞‡§æ‡§∏‡•ç‡§§‡§æ
  const fileName = filePath.split("/").pop(); // PDF ‡§ï‡§æ ‡§®‡§æ‡§Æ

  // ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§Ø‡§π ‡§∏‡§π‡•Ä ‡§´‡•ã‡§≤‡•ç‡§°‡§∞ ‡§Æ‡•á‡§Ç ‡§π‡•à
  if (!filePath.startsWith("tests-to-process/")) {
    return functions.logger.log("This is not a file to process.");
  }

  const bucket = getStorage().bucket(fileBucket);
  const file = bucket.file(filePath);

  // 1. PDF ‡§´‡§æ‡§á‡§≤ ‡§ï‡•ã ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§â‡§∏‡§ï‡§æ ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§®‡§ø‡§ï‡§æ‡§≤‡•á‡§Ç
  const [fileBuffer] = await file.download();
  const pdfData = await pdf(fileBuffer);
  const pdfText = pdfData.text;

  if (!pdfText) {
    return functions.logger.error("Could not extract text from PDF.");
  }

  // 2. Gemini API ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂ (Prompt) ‡§¨‡§®‡§æ‡§è‡§Å
  const prompt = `
    Based on the following text extracted from a PDF, create a structured quiz.
    Extract all questions, their multiple-choice options, and the correct answer.
    The output must be a valid JSON array of objects.
    Each object in the array should have three keys:
    1. "questionText" (string): The full text of the question.
    2. "options" (array of strings): The multiple-choice options.
    3. "correctOptionIndex" (integer): The index of the correct answer in the options array (starting from 0).

    Example of the required JSON output:
    [
      {
        "questionText": "What is the capital of India?",
        "options": ["Mumbai", "New Delhi", "Chennai", "Kolkata"],
        "correctOptionIndex": 1
      }
    ]

    Here is the text to process:
    ---
    ${pdfText}
    ---
  `;

  try {
    // 3. Gemini API ‡§ï‡•ã ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç
    const result = await client.generateMessage({
      model: MODEL_NAME,
      prompt: { text: prompt },
    });

    const responseText = result[0].candidates[0].content;
    
    // Gemini ‡§∏‡•á ‡§Æ‡§ø‡§≤‡•á JSON ‡§ï‡•ã ‡§∏‡§æ‡•û ‡§ï‡§∞‡•á‡§Ç
    const cleanJson = responseText.replace(/```json/g, "").replace(/```/g, "").trim();
    const questionsArray = JSON.parse(cleanJson);

    // 4. Firestore ‡§Æ‡•á‡§Ç ‡§è‡§ï ‡§®‡§Ø‡§æ ‡§ü‡•á‡§∏‡•ç‡§ü ‡§¨‡§®‡§æ‡§è‡§Å
    const firestore = getFirestore();
    const testRef = await firestore.collection("Tests").add({
      title: `Test from: ${fileName}`,
      description: "Auto-generated from uploaded PDF.",
      examName: "Auto-Generated",
      category: "auto",
      tier: null,
      testType: "pdf-mock",
      testFormat: "full",
      isActive: true,
      createdAt: new Date(),
    });

    // 5. ‡§∏‡§≠‡•Ä ‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡•ã‡§Ç ‡§ï‡•ã Firestore ‡§Æ‡•á‡§Ç ‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç
    const batch = firestore.batch();
    for (const question of questionsArray) {
      const questionRef = firestore.collection("Questions").doc();
      batch.set(questionRef, {
        testId: testRef.id,
        questionText: question.questionText,
        options: question.options,
        correctOptionIndex: question.correctOptionIndex,
        subject: "Auto-Generated",
      });
    }
    await batch.commit();

    functions.logger.log(`‚úÖ Successfully generated ${questionsArray.length} questions for test ${testRef.id}`);
    
    // ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏ ‡§π‡•ã‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§´‡§æ‡§á‡§≤ ‡§ï‡•ã ‡§¶‡•Ç‡§∏‡§∞‡•á ‡§´‡•ã‡§≤‡•ç‡§°‡§∞ ‡§Æ‡•á‡§Ç ‡§≠‡•á‡§ú‡•á‡§Ç (‡§µ‡•à‡§ï‡§≤‡•ç‡§™‡§ø‡§ï)
    await file.move(`processed-tests/${fileName}`);

  } catch (error) {
    functions.logger.error("Error processing with Gemini API or saving to Firestore:", error);
    // ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•ã‡§®‡•á ‡§™‡§∞ ‡§´‡§æ‡§á‡§≤ ‡§ï‡•ã error ‡§´‡•ã‡§≤‡•ç‡§°‡§∞ ‡§Æ‡•á‡§Ç ‡§≠‡•á‡§ú‡•á‡§Ç (‡§µ‡•à‡§ï‡§≤‡•ç‡§™‡§ø‡§ï)
    await file.move(`error-tests/${fileName}`);
  }

  return null;
});
